package firstStep;

public class Variable {
    public void variable(){
        System.out.print("Переменные и типы данных\n");

        int age;
        age = 42000;
        // int count = 4, yr =3;
        // int a, b, c = 2;
        System.out.printf("Age is: %,d \n", age);    
        System.out.println(age);

        //byte 1 байт (-128 до 127)
        //short 2 байта (-32768 до 32767) 
        //int 4 байта (-2147483648 до 2147483647)
        //long 8 байт (-9 223 372 036 854 775 808 до 9 223 372 036 854 775 807)

        //byte lel = 2;

        float number = 4.34343f; //double -в 2 раза больше знаков после точки
        System.out.printf("%.2f\n",number);

        char ch = '&';
        System.out.print(ch);

        String user_name = "Voold";
        System.out.println(user_name);

        // boolean isHappy = true;
        // boolean isSad = false;

        // %[аргумент_индекс][флаги][ширина][.точность]спецификатор типа

        //[аргумент_индекс] — целое число, указывающее позицию в списке аргументов. 
        // К примеру, ссылка на первый аргумент 1$, ссылка на второй аргумент — 2$, и т.д. 
        // Если же позиция не была задана, аргументы должны находиться в том же порядке, что и ссылки на них в строке форматирования.

        //[флаги] — специальные символы для форматирования. Например:
        // + флаг, означающий, что если числовое значение положительное, оно должно включать знак +
        // - означает выравнивание результата по левому краю
        // , устанавливает разделитель тысяч у целых чисел

        //[ширина] — положительное целое десятичное число, определяющее минимальное количество символов, которые будут выведены. 
        //Если перед этим числом стоит 0, то недостающие символы будут дополнены 0, если 0 нет, то пробелами.
    
        //[.точность] — неотрицательное целое число с точкой перед ним. Как правило используется для ограничения количества 
        //символов. Специфика поведения зависит от конкретного вида спецификатора.
    }
}
